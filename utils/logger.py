"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è onyxChat
"""
import logging
import sys
import warnings
from typing import Optional


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
    
    # ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –∏ —ç–º–æ–¥–∑–∏
    LEVEL_CONFIG = {
        'DEBUG': {'color': '\033[36m', 'emoji': 'üîç', 'name': 'DEBUG'},      # Cyan
        'INFO': {'color': '\033[32m', 'emoji': '‚ÑπÔ∏è', 'name': 'INFO'},        # Green
        'WARNING': {'color': '\033[33m', 'emoji': '‚ö†Ô∏è', 'name': 'WARNING'},  # Yellow
        'ERROR': {'color': '\033[31m', 'emoji': '‚ùå', 'name': 'ERROR'},      # Red
        'CRITICAL': {'color': '\033[35m', 'emoji': 'üö®', 'name': 'CRITICAL'}, # Magenta
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É—Ä–æ–≤–Ω—è
        config = self.LEVEL_CONFIG.get(record.levelname, {'color': '', 'emoji': '', 'name': record.levelname})
        color = config['color']
        emoji = config['emoji']
        name = config['name']
        reset = self.RESET
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        record.levelname = f"{color}{emoji} {name}{reset}"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        if record.levelname in ['ERROR', 'CRITICAL', 'WARNING']:
            record.msg = f"{color}{record.msg}{reset}"
        
        return super().format(record)


class Logger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    _instance: Optional['Logger'] = None
    _initialized = False
    
    def __new__(cls) -> 'Logger':
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not self._initialized:
            self._setup_logging()
            Logger._initialized = True
    
    def _setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è MySQL
        warnings.filterwarnings('ignore', category=Warning, module='aiomysql')
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = ColoredFormatter(
            fmt='%(asctime)s | %(name)-20s | %(levelname)-12s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.DEBUG)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.DEBUG)
        console_handler.setFormatter(formatter)
        console_handler.stream.reconfigure(encoding='utf-8')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        root_logger.addHandler(console_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger('aiogram').setLevel(logging.WARNING)
        logging.getLogger('aiomysql').setLevel(logging.ERROR)  # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        logging.getLogger('aiomysql.cursors').setLevel(logging.ERROR)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–æ–≤
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
        self._setup_module_loggers()
    
    def _setup_module_loggers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_loggers = [
            'main',
            'services.user_service',
            'services.session_service', 
            'services.message_service',
            'services.notification_service',
            'services.database_service',
            'handlers.messages.start',
            'handlers.messages.admin_reply_handlers',
            'handlers.callbacks.messages_handler',
            'handlers.callbacks.users_handler',
            'middlewares.log',
            'middlewares.databaseAdd',
            'utils.refresh'
        ]
        
        for logger_name in app_loggers:
            logger = logging.getLogger(logger_name)
            logger.setLevel(logging.INFO)
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è"""
        return logging.getLogger(name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger_manager = Logger()


def get_logger(name: str) -> logging.Logger:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞"""
    return logger_manager.get_logger(name)
